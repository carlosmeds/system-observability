version: '3.8'
  
services:

  server:
    image: server
    build:
      context: build
    ports:
      - 5000:5000      
    restart: unless-stopped 
    networks:
       observability:

  prometheus:
    image: prom/prometheus:v2.49.1
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.min-block-duration=5m'
      - '--storage.tsdb.max-block-duration=5m'
      - '--web.enable-lifecycle'
    depends_on:
      - thanos-sidecar
    networks:
       observability:

  node-exporter:
    image: prom/node-exporter:v1.7.0
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    restart: unless-stopped 
    privileged: true
    networks:
       observability:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - 8080:8080
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
    devices:
      - '/dev/kmsg'
    restart: unless-stopped
    privileged: true
    networks:
       observability:

  grafana:
    image: grafana/grafana:10.2.5
    ports:
      - 3000:3000

    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
       observability:
  
  loki:
    image: grafana/loki:2.2.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./loki/config:/etc/loki
    networks:
       observability:

  promtail:
    image: grafana/promtail:2.2.1
    volumes:
      - /var/log:/var/log
      - ./promtail/config:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
       observability:
  
  jaeger:
    image: jaegertracing/all-in-one:1.29
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - observability

  thanos-sidecar:
    image: thanosio/thanos:v0.23.0
    command:
      - sidecar
      - --tsdb.path=/prometheus
      - --objstore.config-file=/etc/thanos/s3.yml
      - --prometheus.url=http://prometheus:9090
      - --grpc-address=0.0.0.0:10911 
      - --http-address=0.0.0.0:10912 
    volumes:
      - ./thanos/s3.yml:/etc/thanos/s3.yml
      - prometheus_data:/prometheus
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - BUCKET_NAME
    networks:
      - observability
    ports:
      - "10911:10911"  # gRPC
      - "10912:10912"  # HTTP

  thanos-store:
    image: thanosio/thanos:v0.23.0
    command:
      - store
      - --objstore.config-file=/etc/thanos/s3.yml
      - --grpc-address=0.0.0.0:10921
      - --http-address=0.0.0.0:10922
    volumes:
      - ./thanos/s3.yml:/etc/thanos/s3.yml
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - BUCKET_NAME
    networks:
      - observability
    ports:
      - "10921:10921"  # gRPC
      - "10922:10922"  # HTTP

  thanos-query:
    image: thanosio/thanos:v0.23.0
    command:
      - query
      - --store=thanos-store:10921
    ports:
      - "10902:10902"
    networks:
      - observability
    depends_on:
      - thanos-store

networks:
  observability:
     name: observability

volumes:
    prometheus_data: {}
    grafana_data: {}
